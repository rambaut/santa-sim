#summary Documentation

= Installation =

= Invocation =

== Windows platforms ==

The simplest way to run a simulation configured in config.xml is to invoke the following command from the DOS prompt, from within the directory where your config.xml file is located:

{{{
java -jar c:\path\to\santa.jar config.xml
}}}

Replace `c:\path\to\santa.jar` with the path where you extracted the santa.jar file.

In some cases it may be necessary to configure the JVM to use more memory:

{{{
java -Xmx512M -jar c:\path\to\santa.jar config.xml
}}}

== UNIX, MacOS X, or Linux ==

Change directory to where your config.xml file is located, and invoke using:

{{{
$ java -jar /path/to/santa.jar config.xml
}}}

Replace `/path/to/santa.jar` with the path where you extracted the santa.jar file.

In some cases it may be necessary to configure the JVM to use more memory:

{{{
$ java -Xmx512M -jar /path/to/santa.jar config.xml
}}}

== Command-line options ==

You can bind values to parameters used in your config file. For example to bind the value '10000' to parameter 'generations', and '0.1' to parameter 'selection' use:

{{{
java -jar .../santa.jar -generations=10000 -selection=0.1 config.xml
}}}

= Configuration XML File =

All properties of a simulation, including definition of the initial population, fitness functions, replication and mutation operators, and sampling information, is defined a single XML file.

== Overall format ==

The overall format of a configuration file is like this:

{{{
<santa xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="santa.xsd">

    <!-- How many times should the simulation be run ?
         Optional (default = 1) -->
    <replicates>100</replicates>

    <simulation>
        <!-- Description of the genome: properties, example sequences, and features -->
        <genome>
            ...
        </genome>

        <!-- Definition of the initial population -->
        <population>
            ...
        </population>

        <!-- Description of the (default) fitness function -->
        <fitnessFunction>
            ...
        </fitnessFunction>

        <!-- Description of the (default) replicator -->
        <replicator>
            ...
        </replicator>

        <!-- Description of the (default) mutator -->
        <mutator>
            ...
        </mutator>

        <!-- Definition of a first epoch -->
        <epoch>
            <!-- A name for the epoch (used only to display simulator progress) -->
            <name>epoch 1</name>

            <!-- Duration of the epoch in number of generations -->
            <generations>1000</generations>

            <!-- Optionally, override the default fitness function, replicator, or mutator -->
            <fitnessFunction>
                 ...
            </fitnessFunction>

            <replicator>
                 ...
            </replicator>

            <mutator>
                 ...
            </mutator>
        </epoch>

        <!-- Optionally, additional epochs... -->
        <epoch>
            ...
        </epoch>

        <!-- Define when and how information must be sampled from the simulation -->
        <samplingSchedule>
            ...
        </samplingSchedule>
    </simulation>
</santa>
}}}

== Genome description: <genome> ==

The genome description specifies the length and organization of the genome in different features. A feature corresponds to an open reading frame, and specifies either a nucleotide or transcribed amino acid sequence.

The organization of the genome in features allows to later define different modes of selection that act on different parts of the genome.

In addition, a single sequence or sequence alignment may be specified in the genome block, which may be used to seed the initial population (if configured so in the <population> block), or to configure a purifying selection to reflect observed states (if configured so in a <purifyingFitness> block).

An example of a genome block:

{{{
<genome>
    <length>21</length>

    <!-- protein from a forward ORF that spans the entire genome -->
    <feature>
       <name>ABC protein</name>
       <type>aminoAcid</type>
       <coordinates>1-21</coordinates>
    </feature>

    <!-- protein from a backward ORF spanning sites 11 to 19 --> 
    <feature>    
       <name>DE protein</name>
       <type>aminoAcid</type>
       <coordinates>19-11</coordinates>
    </feature>

    <sequences>
>seq1
CCTCAGGTCACTCTTTGGCAAC
>seq2
CCTCGGGTCACTCCTTGGCGAC
    </sequences>
</genome>
}}}

=== Genome length: <length> ===

The genome length, as a number of nucleotides.

=== Genome feature: <feature> ===

A genome feature has three properties:
 * *<name>* A unique feature name.
 * *<type>* Must be 'nucleotide' or 'aminoAcid'. This is used to define if a fitness factor acts on nucleotides or amino acids. Note that for aminoAcid, the length of the feature needs to be a multiple of 3.
 * *<coordinates>* Defines how the feature is created from nucleotides in the genome. The format is a comma-separated list of fragments. Each fragment is defined by a single nucleotide site, or a range (begin-end). A range where begin is larger than end is read in the opposite direction. 

By default, a nucleotide feature 'genome' is created, which represents the entire genome.

=== Sequence or sequence alignment: <sequences> ===

One or multiple full-genome sequences may be given, either in FASTA or _plain_ format. In the plain format, sequences are separated by a new-line.

== Initial population: <population> ==

The initial population is described by a population size and a way to create its genomes. Note that currently, the population size is kept constant throughout the entire simulation.

An example of a population block:
{{{
<population>
    <populationSize>10000</populationSize>
    <inoculum>all</inoculum>
</population>
}}}

=== Population size: <populationSize> ===

The number of individuals in the population. Simulation speed is roughly _N_ log _N_ to the population size _N_. *TODO: check this!*

=== Inoculum: <inoculum> ===

Defines how the genomes for all individuals in the initial population are initialized. The <inoculum> block is optional and 'none' is the default value.

Possible values are:
 * *none*: initialize the genome of all individuals to a default nucleotide sequence which is poly-adenine ('AAA...')
 * *all*: initialize the genome of each individual by sampling, with replacement, from all sequences provided in the <sequences> block within the <genome> description.
 * *consensus*: initialize the genome of all individuals to the consensus sequence for the sequences provided in the <sequences> block within the <genome> description.
 * *random*: initialize the genome of all individuals to the same sequence, randomly  chosen from the sequences provided in the <sequences> block within the <genome> description.

== Fitness function: <fitnessFunction> ==

This block defines a fitness function. The fitness function may be described as one or more factors, which are multiplied to obtain the fitness for a single individual.

An empty <fitnessFunction> block defines a neutral fitness function: the fitness of all individuals is the same, regardless of their genome sequence.

Each factor may apply to all or some sites within a genome feature.

An example of a fitness function block (with two factors) is:

{{{
<fitnessFunction>

    <!-- purifying fitness on all amino acids in ABC protein, except for the 4th -->    
    <purifyingFitness>
        <feature>ABC protein</feature>
        <sites>1-3,5-7</sites>
        <rank>
       	    <order>observed</order>
            <breakTies>random</breakTies>
        </rank>
        <fitness>
	    <lowFitness>0.5</lowFitness>
            <minimumFitness>0.5</minimumFitness>
        </fitness>
    </purifyingFitness>

    <!-- age dependent fitness on alleles corresponding to the entire DE protein -->    
    <ageDependentFitness>
	<feature>DE protein</feature>
	<declineRate>0.005</declineRate>
    </ageDependentFitness>

</fitnessFunction>
}}}

=== Feature and sites ===

Each factor is applied to a selection of sites in a genome feature. By default, this feature is the 'genome' feature (nucleotides of the entire genome), and the sites are all sites in the feature.

This may be overridden by:

 * *<feature>*: the name of one of the defined features in the <genome> description. If omitted, 'genome' is assumed.
 * *<sites>*: A comma separated list of single sites or site ranges within the feature. Note that if the feature is an amino acid feature, this refers to amino acid sites, while if the feature is a nucleotide feature, this refers to nucleotide sites.

=== Purifying fitness function: <purifyingFitness> ===

This fitness function defines a purifying selection, which acts on each site individually.     

For each site, the different possible states (4 nucleotides or 20 amino acids) are ordered according to a <rank> definition. This ordering ranks the states from the fittest to most deleterious state. Subsequently, all but the fittest states are assigned a negative selection coefficient, according to a <fitness> definition.

Optionally, following a random process, the selection coefficients for a fit and less fit state is swapped, creating a fitness function which drives a non-stationary positive selection.

*<rank>*

 * <order>: how the states should be ordered:
   Possible values are:
   * *observed*: states are ordered by their frequency in the <sequences> alignment defined in the <genome> description, by decreasing frequency.
   * *chemical*, *hydropathy* or *volume*, or a custom partition: states are ordered so that the states in the partition which contains the most frequent state in the <sequences> alignment defined in the <genome> description preceed the other states. A custom partition of the states is defined by listing them separated by '|'. 

 * <breakTies>: if two states should be given the same rank, is the tie broken randomly ('random') or should the state order be used ('ordered').

*<fitness>*

*<fluctuate>*